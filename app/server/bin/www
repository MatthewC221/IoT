#!/usr/bin/env node

/**
 * Module dependencies.
 */

const crypto = require("crypto");
const { DB_Controller } = require('../db/db_controller');
var db = new DB_Controller();
const { Notification_Dispatcher } = require('../notification/notification_dispatcher')
var notif = new Notification_Dispatcher();
var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var ttn = require('ttn');
var config = require('../../client/src/config');
var session = require('../db/session');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


connect_ttn();

function connect_ttn () {
    ttn.data(config.ttnConfig.appId, config.ttnConfig.accessKey)
    .then(client => {
        console.log("server-ttn: connected");
        return new Promise((resolve, reject) => {
            client.on("uplink", (devID, payload) => {
                console.log("server-ttn: uplink recieved");
                var data = {
                    ID: crypto.randomBytes(16).toString("hex"),
                    timestamp: payload.metadata.time,
                    message: payload.payload_raw.toString(),
                    devId: payload.dev_id,
                    read: false
                }
                console.log("server-ttn: sending to client callback")
                session.dispatch_callback(data);
                notif.notifyOnTrespasser(data.devId, data.message);
                db.store_uplink(data, session.user);
            })
        })
    })
    .catch((err) => {
        console.log(err)
   })
}